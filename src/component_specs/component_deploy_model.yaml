name: Deploy model
inputs:
- {name: model, type: Model}
- {name: project, type: String}
- {name: region, type: String}
outputs:
- {name: vertex_endpoint, type: Artifact}
- {name: vertex_model, type: Model}
implementation:
  container:
    image: python:3.9
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'google-cloud-aiplatform' 'kfp==1.8.14' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def deploy_model(
          model: Input[Model],
          project: str,
          region: str,
          vertex_endpoint: Output[Artifact],
          vertex_model: Output[Model]
      ):
          from google.cloud import aiplatform

          aiplatform.init(project=project, location=region)

          deployed_model = aiplatform.Model.upload(
              display_name="my-model-pipeline"
              , artifact_uri = model.uri.replace("model.pkl", "")
              , serving_container_image_uri="us-docker.pkg.dev/vertex-ai/prediction/sklearn-cpu.0-24:latest"
          )
          endpoint = deployed_model.deploy(machine_type="n1-standard-4")

          # Save data to the output params
          vertex_endpoint.uri = endpoint.resource_name
          vertex_model.uri = deployed_model.resource_name

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - deploy_model
